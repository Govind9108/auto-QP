import streamlit as st
from langchain_openai import AzureChatOpenAI
from langchain_core.prompts import ChatPromptTemplate, FewShotPromptTemplate, PromptTemplate, MessagesPlaceholder
from langchain_community.document_loaders import PyPDFLoader

import base64
from io import BytesIO
from fpdf import FPDF
from prompts import prompt_template
import os
from dotenv import load_dotenv
from io import BytesIO

load_dotenv(".env.example", override=True)


# Define the LLMResponse class
class LLMResponse:
    def __init__(self, syllabus, custom_input):
        self.syllabus = syllabus
        self.custom_input = custom_input
        self.llm = AzureChatOpenAI(
            deployment_name = os.environ.get('DEPLOYMENT'),
            model_name = os.environ.get('MODEL'),
            temperature=0,
            max_tokens=500,
        )

    def generate_response(self):
        # Define the prefix for the prompt
        prefix = """
        You are an AI assistant specializing in creating question papers. Based on the provided syllabus and user preferences,
        generate question papers. Ensure the questions cover diverse topics, include a mix of difficulty levels (easy, medium, and hard),
        and are formatted professionally.
        
        Below is the syllabus details:
        syllabus : {syllabus}
        """

        # Define examples for FewShotPromptTemplate
        examples = [
            {
                "input": "Generate 1 set of 5 questions based on Algebra syllabus.",
                "query": """
                Set 1:
                1. Solve the quadratic equation: x^2 + 5x + 6 = 0.
                2. Prove that the sum of the angles in a triangle is 180 degrees.
                3. Find the slope of the line passing through points (2, 3) and (4, 7).
                4. Simplify: (x^2 - 4) / (x + 2).
                5. Solve for x: 3x + 7 = 10.
                """,
            },
            {
                "input": "Generate 2 sets of 3 questions each based on Physics syllabus.",
                "query": """
                Set 1:
                1. State Newton's Second Law of Motion and provide an example.
                2. Explain the concept of kinetic energy and write its formula.
                3. Calculate the force acting on a 2kg object accelerating at 3m/s^2.

                Set 2:
                1. Define and differentiate between scalar and vector quantities.
                2. A car accelerates from rest to 60m/s in 5 seconds. Find its acceleration.
                3. Derive the formula for work done: W = F Ã— d Ã— cos(Î¸).
                """,
            },
        ]

        # Define example_prompt and FewShotPromptTemplate
        example_prompt = PromptTemplate.from_template("User input: {input}\nGenerated question paper: {query}")
        few_prompt = FewShotPromptTemplate(
            examples=examples,
            example_prompt=example_prompt,
            prefix=prefix,
            suffix="User input: {input}\nGenerated question paper: ",
            input_variables=["input", "syllabus"],
        )

        # Extract syllabus and custom input for prompt formatting
        syllabus_text = self.syllabus
        input_text = f"Generate {self.custom_input['num_sets']} sets of {self.custom_input['num_questions']} questions based on the provided syllabus."

        # Format the prompt with the syllabus and user inputs
        prompt_format = few_prompt.format(input=input_text, syllabus=syllabus_text)

        # Construct the final prompt with a system message
        final_prompt = ChatPromptTemplate.from_messages(
            [
                ("system", prompt_format),
                ("human", "{input}"),
            ]
        )

        # Create a chain combining the prompt and the LLM
        chain = final_prompt | self.llm

        # Invoke the chain and return the generated question papers
        qp_response = chain.invoke(
            {"input": input_text}
        ).content

        return qp_response


def extract_syllabus_content(syllabus_file):
        """
        Extract text content from the uploaded PDF file using PyPDFLoader.
        """
        loader = PyPDFLoader(syllabus_file)
        documents = loader.load()
        # Combine text from all pages
        syllabus_content = "\n".join(doc.page_content for doc in documents)
        return syllabus_content

def save_as_pdf(qp_response):
    """
    Generates a PDF from the question paper response.
    Args:
        qp_response (str): The question paper content generated by the LLM.
    Returns:
        BytesIO: A buffer containing the generated PDF.
    """
    # Initialize a PDF object
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Split the response into lines and add them to the PDF
    for line in qp_response.split("\n"):
        pdf.cell(0, 10, txt=line, ln=True)

    # Save the PDF to a BytesIO buffer
    buffer = BytesIO()
    pdf.output(dest='S').encode('latin1')  # Save as string content
    buffer.write(pdf.output(dest='S').encode('latin1'))
    buffer.seek(0)  # Move the buffer's cursor to the start

    return buffer

# Streamlit app UI
def main():
    st.set_page_config(page_title="Automatic Question Paper Generator", layout="wide")
    st.title("Automatic Question Paper Generator ðŸ“„")

    # Sidebar inputs
    st.sidebar.header("Customize Question Paper")
    num_sets = st.sidebar.number_input("Number of Sets", min_value=1, max_value=10, value=1)
    num_questions = st.sidebar.number_input("Questions per Set", min_value=1, max_value=50, value=10)
    custom_input = {"num_sets": num_sets, "num_questions": num_questions}

    # File uploader for syllabus
    syllabus_file = st.file_uploader("Upload Syllabus PDF", type=["pdf"])

    if syllabus_file:
        # Display spinner while processing
        with st.spinner("Reading syllabus and generating question papers..."):
            # Convert PDF content to text
            syllabus_content = extract_syllabus_content("D:\Downloads\Introduction to operating systems.pdf")
            
            # Generate question paper
            llm_response = LLMResponse(syllabus=syllabus_content, custom_input=custom_input)
            qp_response = llm_response.generate_response()

        # Display response and allow download
        st.success("Question papers generated successfully!")
        st.text_area("Generated Question Papers", qp_response, height=400)

        # Generate and download PDF
        pdf_buffer = save_as_pdf(qp_response)
        
        # Use Streamlit to provide the PDF as a downloadable file
        st.download_button(
            label="Download Question Paper PDF",
            data=pdf_buffer,
            file_name="question_paper.pdf",
            mime="application/pdf",
        )

if __name__ == "__main__":
    main()
